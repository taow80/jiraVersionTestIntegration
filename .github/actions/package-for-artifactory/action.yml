o name: Package for Artifactory
description: create nuget package for pushing to artifactory

runs:
  using: composite
  steps:

    - name: Bump ${{ env.APP_NAME }} Version
      shell: bash
      run: |
          npm version minor -w projects/${{ env.PATH_APP_NAME }}

    - name: Get Current Package Version
      shell: bash       
      id: package-version       
      run: |
        echo "VERSION=$(node -p "require('./projects/${{ env.PATH_APP_NAME }}/package.json').version")" >> $GITHUB_OUTPUT
        
    - name: Set Release Version
      shell: bash
      id: release-version
      run:
          echo "RELEASE_VERSION=${{ steps.package-version.outputs.VERSION }}+${{ env.APP_NAME }}" >> $GITHUB_OUTPUT

    - name: Commit Version Bump
      if: env.DEPLOY_ENVIRONMENT == 'production'
      shell: bash
      run: |
        git pull origin master
        git commit -am "version(${{ env.APP_NAME }}): bump version to ${{ steps.package-version.outputs.VERSION }}" -nv
        git push -u origin master

    - name: Get Last Release Version
      if: env.DEPLOY_ENVIRONMENT == 'production'
      shell: bash
      id: last-release-version
      run: |
          echo "LAST_VERSION=$(gh release list | grep -i '^${{ env.PATH_APP_NAME }}@v' | head -n 1 | awk '{print $1}')" >> $GITHUB_OUTPUT
    
    - name: Create Release
      if: env.DEPLOY_ENVIRONMENT == 'production'
      shell: bash
      env: 
        GH_TOKEN: ${{ github.token }}
      id: release-notes
      run: |
        COMMITS=$(node ./.github/release-notes/getCommits.js ${{ steps.last-release-version.outputs.LAST_VERSION }})
        node ./.github/release-notes/createRelease.js ${{ env.PATH_APP_NAME }} ${{ steps.package-version.outputs.VERSION }} "$COMMITS"
        
    - name: Collect Jira issue numbers since last release/tag
      shell: bash
      id: jira-list
      run: |
        SHARED_PROJECT_REGEX='\bcore|\bdomain|\bdomain-components|\bfdl|\bomega|\bpolicy|\bpresentation'
        if [[ ${{ env.PATH_APP_NAME }} == channel ]]; then
          REGEX_APP_MERGE_COMMIT="\((\bchannel|\bpwa|\bbranding|$(echo $SHARED_PROJECT_REGEX))\):"
        elif [[ ${{ env.PATH_APP_NAME }} == backoffice ]]; then
          REGEX_APP_MERGE_COMMIT='\((\bbackoffice|\bbackoffice-v2|$(echo $SHARED_PROJECT_REGEX))\):'
        fi
        echo $REGEX_APP_MERGE_COMMIT
        REGEX_JIRA_TICKET=${{ env.JIRA_PROJECT_KEY }}-[[:digit:]]{1,}
        echo $REGEX_JIRA_TICKET
        echo "git log --merges  $(git describe --abbrev=0 --tags)..HEAD"
        echo "ISSUES=$(git log --merges  $(git describe --abbrev=0 --tags)..HEAD | grep -iE $REGEX_APP_MERGE_COMMIT -B 2 | grep -oE $REGEX_JIRA_TICKET | uniq | sed 's/^\|$/"/g' | paste -sd , - | awk '{print $0}')" >> $GITHUB_OUTPUT

    - name: Create json and invoke Jira webhook
      run: |
        $json = ConvertTo-Json @{issues = @(${{ steps.jira-list.outputs.ISSUES }}); data = @{version = "${{ env.PATH_APP_NAME }}@v${{ steps.package-version.outputs.VERSION }}"; projectName = "${{ env.JIRA_PROJECT_KEY }}"}}
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod ${{ env.JIRA_WEBHOOK_URL }} -Method Post -Body $json -ContentType "application/json"
      shell: pwsh
